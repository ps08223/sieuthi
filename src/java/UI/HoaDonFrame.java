package UI;

import DAO.HoaDonDAO;
import DAO.KhachHangDAO;
import DAO.SanPhamDAO;
import DAO.TaiKhoanNVDAO;
import Entities.HoaDonCT;
import Entities.HoaDon;
import Entities.SanPham;
import Entities.TKHoatDong;
import Helper.DialogHelper;
import java.awt.Color;
import java.text.DecimalFormat;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import java.util.List;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author DELL
 */
public class HoaDonFrame extends javax.swing.JFrame {
    int ChucNang = 0;
    List<HoaDon> hdList;
    List<SanPham> spList;
    List<HoaDonCT> hdctList;
    public HoaDonFrame() {
        initComponents();
        this.setTitle("Quản Lý Hóa Đơn");
        jPanel11.setOpaque(false);
        
        setLocationRelativeTo(null);
        
        showHoaDon();
        showThongTin(0);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField2 = new javax.swing.JTextField();
        buttonGroup1 = new javax.swing.ButtonGroup();
        kGradientPanel5 = new keeptoo.KGradientPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblHDDanhSach = new javax.swing.JTable();
        kGradientPanel4 = new keeptoo.KGradientPanel();
        jPanel11 = new javax.swing.JPanel();
        lblHDMaDH = new javax.swing.JLabel();
        lblHDMaNV = new javax.swing.JLabel();
        lblHDMaKH = new javax.swing.JLabel();
        txtHDMaDH = new javax.swing.JTextField();
        btnHDTimKiem = new javax.swing.JButton();
        txtHDMaNV = new javax.swing.JTextField();
        txtHDMaKH = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblHDGioHang = new javax.swing.JTable();
        lblHDTenSP = new javax.swing.JLabel();
        lblHDGia = new javax.swing.JLabel();
        txtHDGia = new javax.swing.JTextField();
        lblHDSL = new javax.swing.JLabel();
        txtHDSL = new javax.swing.JTextField();
        btnHDThemVaoGio = new javax.swing.JButton();
        lblHDGiamGia = new javax.swing.JLabel();
        txtHDGiamGia = new javax.swing.JTextField();
        lblHDTong = new javax.swing.JLabel();
        txtHDTong = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cboHDTenSP = new javax.swing.JComboBox<>();
        lblHDTrangThai = new javax.swing.JLabel();
        rdoHDDaThanhToan = new javax.swing.JRadioButton();
        rdoHDChuaThanhToan = new javax.swing.JRadioButton();
        btnHDXoa = new javax.swing.JButton();
        btnHDLuu = new javax.swing.JButton();
        btnHDTaoMoi = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jLabel2.setText("jLabel2");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        kGradientPanel5.setkEndColor(new java.awt.Color(0, 204, 204));
        kGradientPanel5.setkStartColor(new java.awt.Color(153, 0, 153));

        tblHDDanhSach.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã HĐ", "Mã NV", "Mã KH", "Ngày Mua", "Hình Thức", "Thanh Toán", "Tổng"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblHDDanhSach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHDDanhSachMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tblHDDanhSach);
        if (tblHDDanhSach.getColumnModel().getColumnCount() > 0) {
            tblHDDanhSach.getColumnModel().getColumn(0).setPreferredWidth(30);
            tblHDDanhSach.getColumnModel().getColumn(1).setPreferredWidth(30);
            tblHDDanhSach.getColumnModel().getColumn(2).setPreferredWidth(30);
            tblHDDanhSach.getColumnModel().getColumn(3).setPreferredWidth(80);
            tblHDDanhSach.getColumnModel().getColumn(4).setPreferredWidth(70);
            tblHDDanhSach.getColumnModel().getColumn(5).setResizable(false);
            tblHDDanhSach.getColumnModel().getColumn(6).setPreferredWidth(150);
        }

        kGradientPanel4.setkEndColor(new java.awt.Color(0, 204, 204));
        kGradientPanel4.setkStartColor(new java.awt.Color(153, 0, 153));

        lblHDMaDH.setBackground(new java.awt.Color(255, 255, 255));
        lblHDMaDH.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHDMaDH.setForeground(new java.awt.Color(255, 255, 255));
        lblHDMaDH.setText("Mã Đơn Hàng");

        lblHDMaNV.setBackground(new java.awt.Color(255, 255, 255));
        lblHDMaNV.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHDMaNV.setForeground(new java.awt.Color(255, 255, 255));
        lblHDMaNV.setText("Mã Nhân Viên");

        lblHDMaKH.setBackground(new java.awt.Color(255, 255, 255));
        lblHDMaKH.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHDMaKH.setForeground(new java.awt.Color(255, 255, 255));
        lblHDMaKH.setText("Mã Khách Hàng");

        btnHDTimKiem.setText("Tìm Kiếm");
        btnHDTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHDTimKiemActionPerformed(evt);
            }
        });

        tblHDGioHang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Tên Sản Phẩm", "Đơn Giá", "Số Lượng", "Giảm Giá", "Tổng Tiền"
            }
        ));
        tblHDGioHang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHDGioHangMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblHDGioHang);

        lblHDTenSP.setBackground(new java.awt.Color(255, 255, 255));
        lblHDTenSP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHDTenSP.setForeground(new java.awt.Color(255, 255, 255));
        lblHDTenSP.setText("Tên Sản Phẩm");

        lblHDGia.setBackground(new java.awt.Color(255, 255, 255));
        lblHDGia.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHDGia.setForeground(new java.awt.Color(255, 255, 255));
        lblHDGia.setText("Đơn Giá");

        txtHDGia.setEditable(false);

        lblHDSL.setBackground(new java.awt.Color(255, 255, 255));
        lblHDSL.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHDSL.setForeground(new java.awt.Color(255, 255, 255));
        lblHDSL.setText("Số Lượng");

        txtHDSL.setEditable(false);

        btnHDThemVaoGio.setText("Thêm Vào Giỏ");
        btnHDThemVaoGio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHDThemVaoGioActionPerformed(evt);
            }
        });

        lblHDGiamGia.setBackground(new java.awt.Color(255, 255, 255));
        lblHDGiamGia.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHDGiamGia.setForeground(new java.awt.Color(255, 255, 255));
        lblHDGiamGia.setText("Giảm Giá");

        txtHDGiamGia.setEditable(false);

        lblHDTong.setBackground(new java.awt.Color(255, 255, 255));
        lblHDTong.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHDTong.setForeground(new java.awt.Color(255, 255, 255));
        lblHDTong.setText("Tổng");

        txtHDTong.setEditable(false);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 51, 51));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("GIỎ HÀNG");

        cboHDTenSP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboHDTenSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboHDTenSPActionPerformed(evt);
            }
        });

        lblHDTrangThai.setBackground(new java.awt.Color(255, 255, 255));
        lblHDTrangThai.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHDTrangThai.setForeground(new java.awt.Color(255, 255, 255));
        lblHDTrangThai.setText("Trạng Thái");

        buttonGroup1.add(rdoHDDaThanhToan);
        rdoHDDaThanhToan.setSelected(true);
        rdoHDDaThanhToan.setText("Đã Thanh Toán");

        buttonGroup1.add(rdoHDChuaThanhToan);
        rdoHDChuaThanhToan.setText("Chưa Thanh Toán");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel11Layout.createSequentialGroup()
                                .addComponent(lblHDMaDH, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtHDMaDH))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel11Layout.createSequentialGroup()
                                .addComponent(lblHDMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtHDMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblHDMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(txtHDMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(btnHDTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel11Layout.createSequentialGroup()
                                .addComponent(lblHDTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cboHDTenSP, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtHDSL, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHDGia, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(115, 115, 115))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(lblHDGiamGia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtHDGiamGia, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(lblHDTong, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtHDTong, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblHDSL, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHDGia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnHDThemVaoGio, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(lblHDTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(rdoHDDaThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(rdoHDChuaThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblHDMaDH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtHDMaDH)
                    .addComponent(btnHDTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHDMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHDMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHDMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHDMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblHDTenSP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboHDTenSP, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtHDGia, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHDGia, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtHDSL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHDSL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnHDThemVaoGio, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHDGiamGia, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHDGiamGia, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHDTong, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHDTong, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHDTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdoHDDaThanhToan)
                    .addComponent(rdoHDChuaThanhToan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnHDXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/delete.png"))); // NOI18N
        btnHDXoa.setText("Xóa Sản Phẩm");
        btnHDXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHDXoaActionPerformed(evt);
            }
        });

        btnHDLuu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Save.png"))); // NOI18N
        btnHDLuu.setText("Lưu");
        btnHDLuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHDLuuActionPerformed(evt);
            }
        });

        btnHDTaoMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/loop (1).png"))); // NOI18N
        btnHDTaoMoi.setText("Tạo Mới");
        btnHDTaoMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHDTaoMoiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel4Layout = new javax.swing.GroupLayout(kGradientPanel4);
        kGradientPanel4.setLayout(kGradientPanel4Layout);
        kGradientPanel4Layout.setHorizontalGroup(
            kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(kGradientPanel4Layout.createSequentialGroup()
                        .addComponent(btnHDXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(122, 122, 122)
                        .addComponent(btnHDTaoMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnHDLuu, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        kGradientPanel4Layout.setVerticalGroup(
            kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHDXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHDTaoMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHDLuu, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DANH SÁCH HÓA ĐƠN");

        javax.swing.GroupLayout kGradientPanel5Layout = new javax.swing.GroupLayout(kGradientPanel5);
        kGradientPanel5.setLayout(kGradientPanel5Layout);
        kGradientPanel5Layout.setHorizontalGroup(
            kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel5Layout.createSequentialGroup()
                .addComponent(kGradientPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 62, Short.MAX_VALUE))
                    .addComponent(jScrollPane7))
                .addContainerGap())
        );
        kGradientPanel5Layout.setVerticalGroup(
            kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 1062, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void tblHDDanhSachMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHDDanhSachMouseClicked
        txtHDMaDH.setEditable(true);
        txtHDMaNV.setEditable(true);
        btnHDTimKiem.setEnabled(true);
        
        int i = tblHDDanhSach.getSelectedRow();
        ChucNang = 0;
        showThongTin(i);
    }//GEN-LAST:event_tblHDDanhSachMouseClicked

    private void btnHDThemVaoGioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHDThemVaoGioActionPerformed
        if (KiemTraChung()) {
            SanPhamDAO spDAO = new SanPhamDAO();
            int gia = Integer.parseInt(txtHDGia.getText());
            int soLuong = Integer.parseInt(txtHDSL.getText());
            int giamGia = Integer.parseInt(txtHDGiamGia.getText());
            int TonKho = spDAO.TonKho(spDAO.MaSanPham(cboHDTenSP.getSelectedItem().toString()));

            if (soLuong > TonKho) {
                DialogHelper.alert(this, "Số lượng tồn kho không đủ cho số lượng đặt mua (Tồn kho: " + TonKho + ")!");
                return;
            }

            DefaultTableModel model = (DefaultTableModel) tblHDGioHang.getModel();
            model.setRowCount(tblHDGioHang.getRowCount());

            Vector vector = new Vector();
            vector.add(cboHDTenSP.getSelectedItem());
            vector.add(txtHDGia.getText());
            vector.add(txtHDSL.getText());
            vector.add(txtHDGiamGia.getText());

            int tong = (gia-(gia*giamGia/100))*soLuong;
            DecimalFormat format = new DecimalFormat("###,###");
            String tong1 = format.format(tong) + "VNĐ";

            vector.add(tong1);
            model.addRow(vector);

            TongTien();
        }        
    }//GEN-LAST:event_btnHDThemVaoGioActionPerformed

    private void tblHDGioHangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHDGioHangMouseClicked
        
    }//GEN-LAST:event_tblHDGioHangMouseClicked

    private void btnHDTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHDTimKiemActionPerformed
        int MaHD;
        
        if (txtHDMaDH.getText().isEmpty()) {
            DialogHelper.alert(this, "Xin vui lòng không để trống mã đơn hàng!");
            txtHDMaDH.setBackground(Color.yellow);
            return;
        } else {
            try {
              MaHD = Integer.parseInt(txtHDMaDH.getText());  
            } catch (NumberFormatException e) {
                DialogHelper.alert(this, "Xin nhập mã đơn hàng là dạng số >= 1!");
                txtHDMaDH.setBackground(Color.yellow);
                return;
            }
        }
        
        XoaMauNen();
        boolean found = false;
        for (HoaDon hd: hdList) {
//            System.out.println(hd.MaHD);
            if (hd.MaHD == MaHD) {
                DialogHelper.alert(this, "Tìm thấy hóa đơn với mã tương ứng!");
                for (int i = 0; i < tblHDDanhSach.getRowCount(); i++) {
                    if (MaHD == Integer.parseInt(tblHDDanhSach.getValueAt(i, 0).toString())) {
                        tblHDDanhSach.setRowSelectionInterval(i, i);
                    }
                }
                txtHDMaNV.setText(Integer.toString(hd.MaNV));
                txtHDMaKH.setText(Integer.toString(hd.MaKH));
                ChucNang = 0;
                ShowGioHang(hd.MaHD);
                ShowSanPham(0);
                TongTien();
                found = true;
                txtHDMaNV.setEditable(true);
            }
        }
        
        if (!found) {
            DialogHelper.alert(this, "Không tìm thấy mã đơn hàng tương ứng!");
        }
    }//GEN-LAST:event_btnHDTimKiemActionPerformed

    private void btnHDXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHDXoaActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblHDGioHang.getModel();
        int[] i = tblHDGioHang.getSelectedRows();
        int soHang = tblHDGioHang.getRowCount();
        
        for (int j = soHang; j >= 0; j--) {
            for (int a: i) {
                if (j == a) {
                    model.removeRow(j);
                }
            }
        }
        
        TongTien();      
    }//GEN-LAST:event_btnHDXoaActionPerformed

    private void btnHDLuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHDLuuActionPerformed
        int hang = tblHDDanhSach.getSelectedRow();
        
        HoaDonDAO hdDAO = new HoaDonDAO();
        SanPhamDAO spDAO = new SanPhamDAO();
        KhachHangDAO khDAO = new KhachHangDAO();
        if (ChucNang == 0) {
            if (KiemTraCapNhat()) {
                boolean found = false;
                for (HoaDon hd: hdList) {
                    if (hd.MaHD == Integer.parseInt(txtHDMaDH.getText())) {
                        found = true;
                        
                        int TrangThai;
                        if (rdoHDChuaThanhToan.isSelected()) {
                            TrangThai = 0;
                        } else {
                            TrangThai = 1;
                        }
                        
                        hdDAO.Update(Integer.parseInt(txtHDMaKH.getText()), 
                            Integer.parseInt(txtHDMaNV.getText()),
                            TrangThai,
                            Integer.parseInt(txtHDMaDH.getText()));
                        hdDAO.DeleteHDCT(Integer.parseInt(txtHDMaDH.getText()));
                        for (int i = 0; i < tblHDGioHang.getRowCount(); i++) {
                            hdDAO.HDCTInsert(Integer.parseInt(txtHDMaDH.getText()), 
                                    spDAO.MaSanPham(tblHDGioHang.getValueAt(i, 0).toString()), 
                                    Integer.parseInt(tblHDGioHang.getValueAt(i, 2).toString()), 
                                    Integer.parseInt(tblHDGioHang.getValueAt(i, 3).toString()));
                        }
                
                        DialogHelper.alert(this, "Cập nhật thành công!");
                        showHoaDon();
                        ThongTinHoaDon(hang);
                    }
                }
                    
                if (!found) {
                    DialogHelper.alert(this, "Mã đơn hàng không tồn tại!");
                }
            }
        } else {
            int MaKH;
            if (txtHDMaKH.getText().isEmpty()) {
                khDAO.Insert();
                MaKH = khDAO.KHMoiNhat();
            } else {
                MaKH = Integer.parseInt(txtHDMaKH.getText());
            }
            
            if (KiemTraChung()) {    
                int TrangThai;
                if (rdoHDChuaThanhToan.isSelected()) {
                    TrangThai = 0;
                } else {
                    TrangThai = 1;
                }
                hdDAO.Insert(Integer.parseInt(txtHDMaNV.getText()), MaKH, 0, TrangThai);
                int MaHD = hdDAO.MaHDMoiNhat();

                for (int i = 0; i < tblHDGioHang.getRowCount(); i++) {
                    hdDAO.HDCTInsert(MaHD, 
                            spDAO.MaSanPham(tblHDGioHang.getValueAt(i, 0).toString()), 
                            Integer.parseInt(tblHDGioHang.getValueAt(i, 2).toString()), 
                            Integer.parseInt(tblHDGioHang.getValueAt(i, 3).toString()));
                }

                DialogHelper.alert(this, "Thêm mới thành công!");
                showHoaDon();
                ThongTinHoaDon(tblHDDanhSach.getRowCount()-1);
            }
        }
    }//GEN-LAST:event_btnHDLuuActionPerformed

    private void btnHDTaoMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHDTaoMoiActionPerformed
        TaiKhoanNVDAO tknvDAO = new TaiKhoanNVDAO();
        
        boolean Login = false;
        int MaNV = 0;
        if (!TKHoatDong.TaiKhoan.isEmpty()) {
            Login = true;
            MaNV = tknvDAO.MaNhanVien(TKHoatDong.TaiKhoan);
            txtHDMaNV.setEditable(false);
        }
        
        if (!Login) {
            DialogHelper.alert(this, "Vui lòng đăng nhập lại!");
        }
        
        txtHDMaNV.setText(Integer.toString(MaNV));
            
        XoaTrang();
        txtHDTong.setText("0");
        txtHDSL.setEditable(true);
        txtHDGiamGia.setEditable(true);
        ChucNang = 1;
    }//GEN-LAST:event_btnHDTaoMoiActionPerformed

    private void cboHDTenSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboHDTenSPActionPerformed
        String TenSP = cboHDTenSP.getSelectedItem().toString();
        for (int j = 0; j < spList.size(); j++) {
            SanPham sp = spList.get(j);
            if (TenSP.equals(sp.Ten)) {
                txtHDGia.setText(Integer.toString(sp.Gia));
            }
        }
    }//GEN-LAST:event_cboHDTenSPActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
//        if (TKHoatDong.TaiKhoan.equals("NV002")) {
//            this.dispose();
//            QuanLy2 ql2 = new QuanLy2();
//            ql2.pack();
//            ql2.setVisible(true);
//        }
    }//GEN-LAST:event_formWindowClosed
        
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (TKHoatDong.VaiTro.equals("1")) {
            this.dispose();
            QuanLy2 ql2 = new QuanLy2();
            ql2.pack();
            ql2.setVisible(true);
        } else {
            this.dispose();
            QuanLy1 ql1 = new QuanLy1();
            ql1.pack();
            ql1.setVisible(true);
        }
    }//GEN-LAST:event_formWindowClosing
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HoaDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HoaDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HoaDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HoaDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HoaDonFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHDLuu;
    private javax.swing.JButton btnHDTaoMoi;
    private javax.swing.JButton btnHDThemVaoGio;
    private javax.swing.JButton btnHDTimKiem;
    private javax.swing.JButton btnHDXoa;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cboHDTenSP;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextField jTextField2;
    private keeptoo.KGradientPanel kGradientPanel4;
    private keeptoo.KGradientPanel kGradientPanel5;
    private javax.swing.JLabel lblHDGia;
    private javax.swing.JLabel lblHDGiamGia;
    private javax.swing.JLabel lblHDMaDH;
    private javax.swing.JLabel lblHDMaKH;
    private javax.swing.JLabel lblHDMaNV;
    private javax.swing.JLabel lblHDSL;
    private javax.swing.JLabel lblHDTenSP;
    private javax.swing.JLabel lblHDTong;
    private javax.swing.JLabel lblHDTrangThai;
    private javax.swing.JRadioButton rdoHDChuaThanhToan;
    private javax.swing.JRadioButton rdoHDDaThanhToan;
    private javax.swing.JTable tblHDDanhSach;
    private javax.swing.JTable tblHDGioHang;
    private javax.swing.JTextField txtHDGia;
    private javax.swing.JTextField txtHDGiamGia;
    private javax.swing.JTextField txtHDMaDH;
    private javax.swing.JTextField txtHDMaKH;
    private javax.swing.JTextField txtHDMaNV;
    private javax.swing.JTextField txtHDSL;
    private javax.swing.JTextField txtHDTong;
    // End of variables declaration//GEN-END:variables
    public void showHoaDon() {
        DefaultTableModel model = (DefaultTableModel) tblHDDanhSach.getModel();
        model.setRowCount(0);
        
        HoaDonDAO hdDAO = new HoaDonDAO();
        hdList = hdDAO.HDSelect();
        
        for (HoaDon hd: hdList) {
//            System.out.println(hd.CachThuc);
            Vector vector = new Vector();
            vector.add(hd.MaHD);
            vector.add(hd.MaNV);
            vector.add(hd.MaKH);
            vector.add(hd.NgayThanhToan);
            if (hd.CachThuc) {
                vector.add("Trực tuyến");
            } else {
                vector.add("Tại Cửa Hàng");
            }
            vector.add(hd.TrangThai);
            int TongTien1 = hdDAO.TongHoaDon(hd.MaHD);
            DecimalFormat format = new DecimalFormat("###,###");
            String TongTien2 = format.format(TongTien1);
            vector.add(TongTien2 + "VNĐ");
            model.addRow(vector);
        }
    }
    
    public void showThongTin(int i) {
        SanPhamDAO spDAO = new SanPhamDAO();
        spList = spDAO.Select();
        DefaultComboBoxModel cmodel = new DefaultComboBoxModel();
        for (int j = 0; j < spList.size(); j++) {
            Entities.SanPham sp = spList.get(j);
            cmodel.addElement(sp.Ten);
        }
        cboHDTenSP.setModel(cmodel);
        
        ThongTinHoaDon(i);
    }
    
    public void ThongTinHoaDon(int i) {
        tblHDDanhSach.setRowSelectionInterval(i, i);
        int MaHD = Integer.parseInt(tblHDDanhSach.getValueAt(i, 0).toString());

        for (int j = 0; j < hdList.size(); j++) {
            Entities.HoaDon hd = hdList.get(j);
            if (MaHD == hd.MaHD) {
                txtHDMaDH.setText(Integer.toString(hd.MaHD));
                txtHDMaNV.setText(Integer.toString(hd.MaNV));
                txtHDMaKH.setText(Integer.toString(hd.MaKH));
                if (hd.TrangThai) {
                    rdoHDDaThanhToan.setSelected(true);
                } else {
                    rdoHDChuaThanhToan.setSelected(true);
                }
            }
        }
        
        ShowGioHang(MaHD);
        
        if (tblHDGioHang.getRowCount() > 0) {
            tblHDGioHang.setRowSelectionInterval(0, 0);
            ShowSanPham(0);
        
            TongTien();
        } else {
            txtHDSL.setText("");
            txtHDGiamGia.setText("");
            txtHDTong.setText("0VNĐ");
        }
    }
    
    public void ShowGioHang(int MaHD) {
        HoaDonDAO hdDAO = new HoaDonDAO();
        hdctList = hdDAO.HDCTSelect();
        if (hdctList.size() > 0) {
            btnHDXoa.setEnabled(true);
        }
        DefaultTableModel model = (DefaultTableModel) tblHDGioHang.getModel();
        model.setRowCount(0);
        for (HoaDonCT hdct: hdctList) {
            if (hdct.MaHD == MaHD) {
                int GiaSP = hdDAO.GiaSanPham(hdct.MaSP);
                int SoLuong = hdDAO.SoLuong(hdct.MaHD, hdct.MaSP);
                int GiamGia = hdct.GiamGia;
                
                Vector vector = new Vector();
                vector.add(hdDAO.TenSanPham(hdct.MaSP));
                vector.add(GiaSP);
                vector.add(SoLuong);
                vector.add(GiamGia);
                int Gia1 = (GiaSP - (GiaSP*GiamGia/100))*SoLuong;
                DecimalFormat format = new DecimalFormat("###,###");
                String Gia2 = format.format(Gia1);
                vector.add(Gia2 + "VNĐ");
                model.addRow(vector);
            }
        }
    }
    
    public void ShowSanPham(int i) {
        if (tblHDGioHang.getRowCount() > 0) { 
            tblHDGioHang.setRowSelectionInterval(i, i);
            cboHDTenSP.setSelectedItem(tblHDGioHang.getValueAt(i, 0));
            txtHDGia.setText(tblHDGioHang.getValueAt(i, 1).toString());
            txtHDSL.setText(tblHDGioHang.getValueAt(i, 2).toString());
            txtHDGiamGia.setText(tblHDGioHang.getValueAt(i, 3).toString());
        }
    }
    
    public void XoaMauNen() {
        txtHDGia.setBackground(Color.white);
        txtHDGiamGia.setBackground(Color.white);
        txtHDMaDH.setBackground(Color.white);
        txtHDMaKH.setBackground(Color.white);
        txtHDMaNV.setBackground(Color.white);
        txtHDSL.setBackground(Color.white);
        txtHDTong.setBackground(Color.white);
    }
    
    public void TongTien() {
        int TongTien = 0;
        for (int j = 0; j < tblHDGioHang.getRowCount(); j++) {
            String tTongTien1 = tblHDGioHang.getValueAt(j, 4).toString();
            String tTongTien2 = tTongTien1.replace("VNĐ", "");
            TongTien += Integer.parseInt(tTongTien2.replace(",", ""));
        }
        
        DecimalFormat format = new DecimalFormat("###,###");
        txtHDTong.setText(format.format(TongTien) + "VNĐ");
    }
    
    public void XoaTrang() {
//        txtQL1MaDH.setEditable(false);
//        btnQL1TimKiem.setEnabled(false);
        tblHDDanhSach.removeRowSelectionInterval(tblHDDanhSach.getSelectedRow(), tblHDDanhSach.getSelectedRow());
        txtHDMaDH.setText("");
        txtHDMaKH.setText("");
        if (cboHDTenSP.getItemCount() > 0) {
            cboHDTenSP.setSelectedIndex(0);
        }
//        txtQL1Gia.setText("");
        txtHDSL.setText("");
        txtHDGiamGia.setText("");
        txtHDTong.setText("");
        DefaultTableModel model = (DefaultTableModel) tblHDGioHang.getModel();
        model.setRowCount(0);
    }
    
    public boolean KiemTraChung() {
        if (txtHDSL.getText().isEmpty()) {
            DialogHelper.alert(this, "Không được để trống số lượng!");
            txtHDSL.setBackground(Color.yellow);
            return false;
        } else {
            try {
                int i3 = Integer.parseInt(txtHDSL.getText());
                if (i3 > 0) {
                    XoaMauNen();
                    if (txtHDGiamGia.getText().isEmpty()) {
                        DialogHelper.alert(this, "Không được để trống giảm giá!");
                        txtHDGiamGia.setBackground(Color.yellow);
                        return false;
                    } else {
                        try {
                            int i4 = Integer.parseInt(txtHDGiamGia.getText());
                            if (i4 >= 0 && i4 <= 100) {
                                XoaMauNen();
                                return true;
                            } else {
                                DialogHelper.alert(this, "Xin nhập giảm giá >= 0 và <= 100!");
                                txtHDGiamGia.setBackground(Color.yellow);
                                return false;
                            }
                        } catch (NumberFormatException e) {
                            DialogHelper.alert(this, "Xin nhập giảm giá dạng số!");
                            txtHDGiamGia.setBackground(Color.yellow);
                            return false;
                        }
                    }
                } else {
                    DialogHelper.alert(this, "Xin nhập số lượng > 0!");
                    txtHDSL.setBackground(Color.yellow);
                    return false;
                }
            } catch (NumberFormatException e) {
                DialogHelper.alert(this, "Xin nhập số lượng dạng số!");
                txtHDSL.setBackground(Color.yellow);
                return false;
            }
        }
    }
    
    public boolean KiemTraCapNhat() {
        if (txtHDMaDH.getText().isEmpty()) {
            DialogHelper.alert(this, "Không được để trống mã đơn hàng!");
            txtHDMaDH.setBackground(Color.yellow);
            return false;
        } else {
            try {
                int i1 = Integer.parseInt(txtHDMaDH.getText());
                if (i1 > 0) {
                    XoaMauNen();
                    if (txtHDMaNV.getText().isEmpty()) {
                        DialogHelper.alert(this, "Không được để trống mã nhân viên!");
                        txtHDMaNV.setBackground(Color.yellow);
                        return false;
                    } else {
                        try {
                            int i2 = Integer.parseInt(txtHDMaNV.getText());
                            if (i2 > 0) {
                                XoaMauNen();
                                if (!txtHDMaKH.getText().isEmpty()) {
                                    try {
                                        int i3 = Integer.parseInt(txtHDMaKH.getText());
                                        if (i3 > 0) {
                                            XoaMauNen();
                                            return KiemTraChung();
                                        } else {
                                            DialogHelper.alert(this, "Xin nhập mã khách hàng > 0!");
                                            txtHDMaNV.setBackground(Color.yellow);
                                            return false;
                                        }
                                    } catch (NumberFormatException e) {
                                        DialogHelper.alert(this, "Xin nhập mã khách hàng dạng số!");
                                        txtHDMaKH.setBackground(Color.yellow);
                                        return false;
                                    }
                                } else {
                                    DialogHelper.alert(this, "Không được để trống mã khách hàng!");
                                    txtHDMaKH.setBackground(Color.yellow);
                                    return false;
                                }
                            } else {
                                DialogHelper.alert(this, "Xin nhập mã nhân viên > 0!");
                                txtHDMaNV.setBackground(Color.yellow);
                                return false;
                            }
                        } catch (NumberFormatException e) {
                            DialogHelper.alert(this, "Xin nhập mã nhân viên dạng số!");
                            txtHDMaNV.setBackground(Color.yellow);
                            return false;
                        }
                    }
                } else {
                    DialogHelper.alert(this, "Xin nhập mã đơn hàng > 0!");
                    txtHDMaDH.setBackground(Color.yellow);
                    return false;
                }
            } catch (NumberFormatException e) {
                DialogHelper.alert(this, "Xin nhập mã đơn hàng dạng số!");
                txtHDMaDH.setBackground(Color.yellow);
                return false;
            }
        }
    }
}
